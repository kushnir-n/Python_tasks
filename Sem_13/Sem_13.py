# Возьмите 1-3 задачи из тех, что были на прошлых семинарах или в домашних заданиях. Напишите к ним классы исключения с выводом подробной информации.
# Поднимайте исключения внутри основного кода. Например нельзя создавать прямоугольник со сторонами отрицательной длины.

#Задача 1 с семинара 1
#Треугольник существует только тогда, когда сумма любых двух его сторон больше третьей. 
#Дано a, b, c - стороны предполагаемого треугольника. Требуется сравнить длину каждого отрезка-стороны с суммой двух других. 
#Если хотя бы в одном случае отрезок окажется больше суммы двух других, то треугольника с такими сторонами не существует. 
#Отдельно сообщить является ли треугольник разносторонним, равнобедренным или равносторонним.

from Exceptions import UserNumberError, UserTriangleError, UserDigitError

print ("Task #1")
a = 50
b = 6
c = 7

if a > b + c or b > a + c or c > a + b:
    raise UserTriangleError(value=False)
else: 
    print ("Треугольник существует и он... ")

if a != b and b != c and a != c:
    print ("разносторонний!")
elif a == b and a !=c and b != c:
    print ("равнобедренный!")
elif a == b and b == c and a == c:
    print ("равносторонний!")

#Задача 2 с семинара 1
#Напишите код, который запрашивает число и сообщает является ли оно простым или составным. 
#Используйте правило для проверки: “Число является простым, если делится нацело только на единицу и на себя”. 
#Сделайте ограничение на ввод отрицательных чисел и чисел больше 100 тысяч.


print ("\nTask #2")
n = int(input("Введите число: "))
max_limit = 100000
count = 0
if n < 0 or n > max_limit:
    raise UserNumberError(value=True)
else:  
    for i in range(2, n // 2 + 1):  
        if n % i == 0:
            count += 1
    if count <= 0:
        print("Число является простым")
    else:
        print("Число является составным")

#Задача 1 с семинара 2
#Напишите программу, которая получает целое число и возвращает его шестнадцатеричное строковое представление. 
#Функцию hex используйте для проверки своего результата.

class Numbers:

    def __init__(self, num):
        self.num = num

    def get_hexadecimal_string(self):
        if type(self.num) != int:
            raise UserDigitError(value=True)
        else:
            print ("Ваше число в шестнадцатеричном строковом представлении: " + format(self.num, '#x') + " (проверка: " + hex(self.num) + ")")



if __name__ == '__main__':
    print ("\nTask #3") 
    test = 'jjj'    #данные для теста 
    num = Numbers(test)
    num.get_hexadecimal_string()